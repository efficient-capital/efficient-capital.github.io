{"version":3,"sources":["aws-exports.js","App.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["awsmobile","Amplify","configure","awsconfig","addPluggable","AmazonAIPredictionsProvider","TextIdentification","dispatch","useDispatch","useState","response","setResponse","className","style","position","width","borderWidth","borderStyle","onClick","firebase","auth","signOut","type","onChange","event","target","files","file","console","log","Predictions","identify","text","source","format","then","fullText","window","payload","catch","err","JSON","stringify","Buttons","selectedButton","setSelectedButton","flexDirection","display","justifyContent","map","item","index","key","a","margin","background","Text","useSelector","state","Table","table","tables","item2","index2","borderColor","ExtractedText","currencyColFilt","sharesColFilt","isinColFilt","useEffect","currencyColumn","sharesColumn","isinColumn","size","currencyColIndex","sharesColIndex","isinColIndex","i","columns","columnName","includes","currencyCol","sharesCol","isinCol","rows","push","match","indexesForData","length","parseFloat","replace","height","App","fontSize","color","Login","email","setEmail","password","setPassword","alignItems","value","signInWithEmailAndPassword","error","apps","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AppNavigator","authUser","user","onAuthStateChanged","Boolean","location","hostname","initialState","rootReducer","action","Object","assign","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7384f38b.chunk.js","sourcesContent":["// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:006d0bb6-a31c-4c5a-8765-d6ce1871109f\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_lDs1MFJ09\",\n    \"aws_user_pools_web_client_id\": \"3pbsbjnf2keh8bhtmhjr8r2u8v\",\n    \"oauth\": {},\n    \"predictions\": {\n        \"identify\": {\n            \"identifyText\": {\n                \"proxy\": false,\n                \"region\": \"us-east-1\",\n                \"defaults\": {\n                    \"format\": \"ALL\"\n                }\n            }\n        }\n    }\n};\n\n\nexport default awsmobile;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport Amplify, { Predictions } from \"aws-amplify\";\nimport { AmazonAIPredictionsProvider } from \"@aws-amplify/predictions\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport awsconfig from \"./aws-exports\";\nimport firebase from \"firebase\";\n\nAmplify.configure(awsconfig);\nAmplify.addPluggable(new AmazonAIPredictionsProvider());\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDrMkvs-Ivx7W3Q2WDOuwomLOq9nGbLjPs\",\n  authDomain: \"efficient-capital.firebaseapp.com\",\n  databaseURL: \"https://efficient-capital.firebaseio.com\",\n  projectId: \"efficient-capital\",\n  storageBucket: \"efficient-capital.appspot.com\",\n  messagingSenderId: \"80027404705\",\n  appId: \"1:80027404705:web:271ecc6e8c5ad4e6aa23e0\"\n};\n// Initialize Firebase\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nfunction TextIdentification() {\n  const dispatch = useDispatch();\n  const [response, setResponse] = useState(\"You can add a photo by uploading direcly from the app \");\n\n  function identifyFromFile(event) {\n    setResponse(\"identifiying text...\");\n    const {\n      target: { files }\n    } = event;\n    const [file] = files || [];\n\n    if (!file) {\n      return;\n    }\n\n    console.log(file);\n    Predictions.identify({\n      text: {\n        source: {\n          file\n        },\n        // Available options \"PLAIN\", \"FORM\", \"TABLE\", \"ALL\"\n        format: \"TABLE\"\n      }\n    })\n      .then(fullText => {\n        console.log(fullText);\n        window.response = fullText;\n        dispatch({ type: \"SET_RESPONSE\", payload: fullText });\n        setResponse(\"Done. Check console\");\n      })\n      .catch(err => setResponse(JSON.stringify(err, null, 2)));\n  }\n\n  return (\n    <div className=\"Text\">\n      <div\n        style={{ position: \"absolute\", width: 70, borderWidth: 1, borderStyle: \"solid\" }}\n        onClick={() => firebase.auth().signOut()}\n      >\n        sign out\n      </div>\n      <div>\n        <h3>Text identification</h3>\n        <input type=\"file\" onChange={identifyFromFile}></input>\n        <p>{response}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction Buttons() {\n  const [selectedButton, setSelectedButton] = useState(0);\n\n  return (\n    <div\n      style={{ flexDirection: \"row\", display: \"flex\", borderWidth: 1, borderStyle: \"solid\", justifyContent: \"center\" }}\n    >\n      {[\"Julius Bär\", \"Credit Suisse\", \"ZKB\"].map((item, index) => (\n        <div\n          key={index}\n          onClick={async () => {\n            setSelectedButton(index);\n            window.selectedButton = index;\n            console.log(window.selectedButton);\n          }}\n          style={{\n            width: 100,\n            margin: 20,\n            borderWidth: 1,\n            borderStyle: \"solid\",\n            background: selectedButton === index ? \"lightgreen\" : null\n          }}\n        >\n          {item}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction Text() {\n  const response = useSelector(state => state.response);\n\n  if (response !== null) {\n    return (\n      <div style={{ flexDirection: \"row\", display: \"flex\", justifyContent: \"center\" }}>\n        <div\n          style={{\n            // width: 1\n            // margin: 20,\n            borderWidth: 1,\n            borderStyle: \"solid\"\n          }}\n        >\n          {response.text.fullText}\n        </div>\n      </div>\n    );\n  } else return null;\n}\n\nfunction Table() {\n  const response = useSelector(state => state.response);\n\n  if (response !== null) {\n    const table = response.text.tables[0].table;\n    return (\n      <div style={{ flexDirection: \"row\", display: \"flex\", justifyContent: \"center\" }}>\n        <div\n          style={{\n            // width: 1\n            // margin: 20,\n            borderWidth: 1,\n            borderStyle: \"solid\"\n          }}\n        >\n          {table.map((item, index) => {\n            return (\n              <div key={index} style={{ display: \"flex\", flexDirection: \"row\" }}>\n                <br />\n\n                {item.map((item2, index2) => {\n                  return (\n                    <div\n                      key={index2}\n                      style={{\n                        margin: 4,\n                        width: 140,\n                        borderWidth: 0.5,\n                        borderColor: \"lightgray\",\n                        borderStyle: \"solid\"\n                      }}\n                    >\n                      {item2.text}\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  } else return null;\n}\n\nfunction ExtractedText() {\n  const dispatch = useDispatch();\n  const response = useSelector(state => state.response);\n\n  let currencyColFilt = [];\n  let sharesColFilt = [];\n  let isinColFilt = [];\n\n  useEffect(() => {\n    dispatch({ type: \"CURRENCY_COLUMN\", payload: currencyColFilt });\n    dispatch({ type: \"SHARES_COLUMN\", payload: sharesColFilt });\n    dispatch({ type: \"ISIN_COLUMN\", payload: isinColFilt });\n  }, [response]);\n\n  const currencyColumn = useSelector(state => state.currencyColumn);\n  const sharesColumn = useSelector(state => state.sharesColumn);\n  const isinColumn = useSelector(state => state.isinColumn);\n\n  if (response !== null) {\n    const table = response.text.tables[0].table;\n    const size = response.text.tables[0].size;\n\n    // Check which columns to select\n    let currencyColIndex = 0;\n    let sharesColIndex = 0;\n    let isinColIndex = 0;\n\n    for (let i = 0; i < size.columns; i++) {\n      let columnName = table[0][i].text;\n\n      if (\n        columnName.includes(\"Wahrung\") ||\n        columnName.includes(\"Währung\") ||\n        columnName.includes(\"hrung\") ||\n        columnName.includes(\"nrung\")\n      ) {\n        // Set currency column index\n        currencyColIndex = i;\n      }\n\n      if (columnName.includes(\"Anz./Nominal\") || columnName.includes(\"Anz\") || columnName.includes(\"Nominal\")) {\n        // Set shares column index\n        sharesColIndex = i;\n      }\n\n      if (columnName.includes(\"Valor\") || columnName.includes(\"Volor\") || columnName.includes(\"alor\")) {\n        // Set isin/valor column index\n        isinColIndex = i;\n      }\n    }\n\n    // Puts table data in arrays\n    let currencyCol = [];\n    let sharesCol = [];\n    let isinCol = [];\n\n    for (let i = 0; i < size.rows; i++) {\n      currencyCol.push(table[i][currencyColIndex].text);\n\n      if (table[0][sharesColIndex - 1].text === \"\") {\n        sharesCol.push(table[i][sharesColIndex].text + table[i][sharesColIndex - 1].text);\n      } else if (table[0][sharesColIndex + 1].text === \"\") {\n        sharesCol.push(table[i][sharesColIndex].text + table[i][sharesColIndex + 1].text);\n      } else {\n        sharesCol.push(table[i][sharesColIndex].text);\n      }\n\n      // match any string that contains ch or ie and more than one number\n      isinCol.push(table[i][isinColIndex].text.match(/(ch\\d+|ie\\d+)/gi));\n    }\n\n    // Finds indexes of rows, which have \"CHF\"\n    let indexesForData = [];\n    for (let i = 0; i < currencyCol.length; i++) {\n      if (currencyCol[i] !== \"\" && currencyCol[i] !== \"Wahrung\" && currencyCol[i] !== \"Währung\") {\n        indexesForData.push(i);\n      }\n    }\n\n    // Filters data\n    indexesForData.map((index, i) => {\n      currencyColFilt.push(currencyCol[index]);\n      sharesColFilt.push(parseFloat(sharesCol[index].replace(/'/g, \"\")));\n      isinColFilt.push(isinCol[index]);\n    });\n\n    window.currencyColFilt = currencyColFilt;\n    window.sharesColFilt = sharesColFilt;\n    window.isinColFilt = isinColFilt;\n\n    return (\n      <div style={{ flexDirection: \"row\", display: \"flex\", justifyContent: \"center\" }}>\n        <div\n          style={{\n            // width: 1\n            // margin: 20,\n            flexDirection: \"row\",\n            display: \"flex\",\n            borderWidth: 1,\n            borderStyle: \"solid\"\n          }}\n        >\n          {[currencyColumn, sharesColumn, isinColumn].map((item, index) => {\n            return (\n              <div style={{ flexDirection: \"column\", display: \"flex\" }}>\n                {item.map((item2, index2) => {\n                  return (\n                    <div\n                      key={index2}\n                      style={{\n                        margin: 4,\n                        width: 140,\n                        height: 40,\n                        borderWidth: 0.5,\n                        borderColor: \"lightgray\",\n                        borderStyle: \"solid\"\n                      }}\n                    >\n                      {item2}\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  } else return null;\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <br />\n      Identify Text\n      <TextIdentification />\n      <br />\n      <Buttons />\n      <br />\n      <div style={{ fontSize: 24, color: \"red\" }}>Extracted Text</div>\n      <ExtractedText />\n      <br />\n      <div style={{ fontSize: 24, color: \"red\" }}>Detected Table</div>\n      <Table />\n      <br />\n      <div style={{ fontSize: 24, color: \"red\" }}>Full Text</div>\n      <Text />\n    </div>\n  );\n}\n\nfunction Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\"\n      }}\n    >\n      <div>email</div>\n      <input onChange={text => setEmail(text.target.value)} type=\"text\" />\n      <br></br>\n      <div>password</div>\n      <input onChange={text => setPassword(text.target.value)} type=\"password\" />\n      <br></br>\n\n      <div\n        style={{\n          borderWidth: 1,\n          borderStyle: \"solid\"\n        }}\n        onClick={() =>\n          firebase\n            .auth()\n            .signInWithEmailAndPassword(email, password)\n            .catch(function(error) {\n              // Handle Errors here.\n\n              console.log(error);\n              // ...\n            })\n        }\n      >\n        log in\n      </div>\n    </div>\n  );\n}\n\nfunction AppNavigator() {\n  const dispatch = useDispatch();\n  const authUser = useSelector(state => state.user);\n\n  firebase.auth().onAuthStateChanged(authUser => {\n    if (authUser) {\n      dispatch({ type: \"USER\", payload: authUser });\n    }\n\n    if (authUser === null) {\n      dispatch({ type: \"USER\", payload: null });\n    }\n  });\n\n  if (authUser !== null) {\n    return <App />;\n  }\n\n  if (authUser === null) {\n    return <Login />;\n  }\n}\n\nexport default AppNavigator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import julius from \"../julius.json\";\n\nconst initialState = {\n  response: julius,\n  user: null,\n  currencyColumn: [],\n  sharesColumn: [],\n  isinColumn: []\n};\nfunction rootReducer(state = initialState, action) {\n  if (action.type === \"SET_RESPONSE\") {\n    return Object.assign({}, state, {\n      response: action.payload\n    });\n  }\n\n  if (action.type === \"USER\") {\n    return Object.assign({}, state, {\n      user: action.payload\n    });\n  }\n  if (action.type === \"CURRENCY_COLUMN\") {\n    return Object.assign({}, state, {\n      currencyColumn: action.payload\n    });\n  }\n\n  if (action.type === \"SHARES_COLUMN\") {\n    return Object.assign({}, state, {\n      sharesColumn: action.payload\n    });\n  }\n\n  if (action.type === \"ISIN_COLUMN\") {\n    return Object.assign({}, state, {\n      isinColumn: action.payload\n    });\n  }\n\n  return state;\n}\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nimport rootReducer from \"./redux/reducers\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}